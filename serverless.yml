service: challenger

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-s3-local
custom:
  dynamodb:
    start:
      port: ${self:provider.environment.LOCAL_DB_PORT}
      inMemory: true
      migrate: true
      seed: true
    stages:
      - dev
    seed:
      domain:
        sources:
          - table: ${self:service}-table
            sources: [./database/seeds/videos.json]

  s3:
    host: localhost
    directory: /tmp

provider:
  name: aws
  runtime: nodejs12.x
  profile: elhadj
  stage: dev
  region: us-east-1
  memorySize: 1024
  timeout: 30

  environment:
    TABLENAME_VIDEOS: ${self:service}
    BUCKET_NAME: ${self:service}-input-videos
    LOCAL_DB_PORT: 8002

  apiGateway:
    binaryMediaTypes:
      - 'image/*'
      - 'video/*'

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [ VideosDynamoDbTable, Arn ]
  - Effect: Allow
    Action: execute-api:ManageConnections
    Resource: arn:aws:execute-api:${self:provider.region}:*:**/@connections/*
  - Effect: Allow
    Action: lambda:InvokeFunction
    Resource: arn:aws:lambda:${self:provider.region}:*:function:*
  - Effect: Allow
    Action:
      - 's3:*'
    Resource:
      Fn::Join:
      - ""
      - - "arn:aws:s3:::*"

functions:

  create:
    handler: handler.videoCreate
    events:
      - http:
          path: videos
          method: post
          cors: true

  get:
    handler: handler.videoGet
    events:
    - http:
        path: videos/{challengeId}/{userId}
        method: get
        cors: true
        request:
          parameters:
            paths:
              challengeId: true
              userId: true

  update:
    handler: handler.videoUpdate
    events:
    - http:
        path: videos/{challengeId}/{userId}
        method: put
        cors: true
        request:
          parameters:
            paths:
              challengeId: true
              userId: true

  delete:
    handler: handler.videoDelete
    events:
    - http:
        path: videos/{challengeId}/{userId}
        method: delete
        cors: true
        request:
          parameters:
            paths:
              challengeId: true
              userId: true

  getAllVideos:
    handler: handler.getAllVideos
    events:
    - http:
        path: allVideos/{challengeId}
        method: get
        cors: true
        request:
          parameters:
            paths:
              challengeId: true


  getUserVideos:
    handler: handler.getAllUserVideos
    events:
    - http:
        path: allUserVideos/{userId}
        method: get
        cors: true
        request:
          parameters:
            paths:
              userId: true


  upload:
    handler: handler.videoUpload
    events:
    - http:
        path: upload/{fileName}
        method: POST
        cors: true
        request:
          parameters:
            paths:
              fileName: true

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
    VideosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLENAME_VIDEOS}
        AttributeDefinitions:
          - AttributeName: challengeId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: challengeId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
